<?xml version='1.0' encoding="ISO-8859-1"?>

<part id="tracker-overview">
  <title>Overview</title>
  <partintro>
    <para>
      The libtracker-sparql library is the foundation for Tracker
      querying and inserting into the data store. The data store
      allows both querying and inserting using SPARQL based on the
      Nepomuk ontology.
    </para>
  </partintro>


  <chapter id="tracker-overview-connection-methods">
    <title>Connection methods</title>

    <para>
        To access the session-wide Tracker store, you should call
        <function><link linkend="tracker-sparql-connection-get">tracker_sparql_connection_get</link></function>.
    </para>
    <para>
        You can create and access a private store using
        <function><link linkend="tracker-sparql-connection-local-new">tracker_sparql_connection_local_new</link></function>.
    </para>
  </chapter>

  <chapter id="tracker-overview-compiling">
    <title>Compiling applications</title>

    <para>
      To compile applications using libtracker-sparql, you
      need to tell the compiler where to find the proper header files
      and libraries. This is done with the
      <application>pkg-config</application> utility.
    </para>

    <para>
      The following interactive shell session demonstrates how
      <application>pkg-config</application> is used (the actual output on
      your system may be different):
<programlisting>
$ pkg-config --cflags tracker-sparql-0.12
-pthread -I/usr/include/tracker-0.12 -I/usr/include/tracker-0.12/libtracker-sparql -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include

$ pkg-config --libs tracker-sparql-0.12
-Wl,--export-dynamic -pthread -ltracker-sparql-0.12 -lgio-2.0 -lgobject-2.0 -lgmodule-2.0 -lgthread-2.0 -lrt -lglib-2.0
</programlisting>
    </para>
    <para>
      The simplest way to compile a program is to use the "backticks"
      feature of the shell. If you enclose a command in backticks
      (<emphasis>not single quotes</emphasis>), then its output will be
      substituted into the command line before execution:
<programlisting>
 $ cc `pkg-config --cflags --libs tracker-sparql-0.12` hello.c -o hello
</programlisting>
    </para>

  </chapter>

  <chapter id="tracker-overview-environment-variables">
    <title>Environment Variables</title>

    <para>
      There are a number of environment variables which affect the way
      that the libtracker-sparql library will do its work. Those
      environment variables are described here.

      <itemizedlist>
	<listitem>
	  <emphasis>TRACKER_USE_LOG_FILES</emphasis>
	  <para>
	    Don't just log to stdout and stderr, but to log files too
	    which are kept in $HOME/.local/share/tracker/. This came
	    into effect in 0.15.3 and 0.16.0. After this version of
	    Tracker, logging to file (usually useful for debugging)
	    can only be done by declaring this environment variable.
	  </para>
	</listitem>
	<listitem>
	  <emphasis>TRACKER_USE_CONFIG_FILES</emphasis>
	  <para>
	    Don't use GSettings, instead use a config file similar to
	    how settings were saved in 0.10.x. That is, a file which
	    is much like an .ini file. These are saved to
	    $HOME/.config/tracker/
	  </para>
	</listitem>
	<listitem>
	  <emphasis>TRACKER_VERBOSITY</emphasis>
	  <para>
	    Historically, all queries would go
	    through <emphasis>tracker-store</emphasis> and all
	    requests would be logged according to the verbosity set
	    in <emphasis>tracker-store.cfg</emphasis> (see manual
	    pages for <emphasis>tracker-store.cfg</emphasis>). Since
	    libtracker-sparql may
	    circumvent <emphasis>tracker-store</emphasis> if using the
	    direct access backend, this environment variable was added
	    to let clients choose the log level. The same values apply
	    to all other processes which have logging and a
	    configuration to control it. Values range
	    from <emphasis>0</emphasis> to <emphasis>3</emphasis>,
	    0=errors, 1=minimal, 2=detailed, 3=debug. By default it
	    is <emphasis>0</emphasis>.
	  </para>
	</listitem>
      </itemizedlist>
    </para>

  </chapter>

</part>

